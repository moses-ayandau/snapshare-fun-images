name: SnapShare Blue-Green CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: snapshare
  ECS_CLUSTER: dev-SnapShare-test
  ECS_SERVICE: snapshare-service
  CONTAINER_NAME: snapshare-image
  DEPLOYMENT_GROUP: snapshare-group-name
  APPLICATION_NAME: snapshare-application

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition snapshare-task \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Debug updated task definition
        run: cat ${{ steps.task-def.outputs.task-definition }}

      - name: Create AppSpec file for CodeDeploy
        run: |
          TASK_DEF_PATH="${{ steps.task-def.outputs.task-definition }}"
          cat > appspec.yaml << EOL
          ---
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: ${TASK_DEF_PATH}
                  LoadBalancerInfo:
                    ContainerName: ${{ env.CONTAINER_NAME }}
                    ContainerPort: 80
                  PlatformVersion: "LATEST"
          EOL

      - name: Skip YAML validation
        run: |
          echo "Skipping yamllint validation to avoid style issues"
          cat appspec.yaml

      - name: Deploy with CodeDeploy
        id: deploy
        run: |
          set -e
          # Check if the application exists first
          if ! aws deploy get-application --application-name ${{ env.APPLICATION_NAME }} &>/dev/null; then
            echo "CodeDeploy application ${{ env.APPLICATION_NAME }} does not exist."
            echo "Please create the application and deployment group before running this workflow."
            exit 1
          fi

          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.APPLICATION_NAME }} \
            --deployment-group-name ${{ env.DEPLOYMENT_GROUP }} \
            --revision revisionType=AppSpecContent,appSpecContent="{content='$(cat appspec.yaml | base64 -w 0)'}" \
            --description "Deployment via GitHub Actions" \
            --output json | jq -r '.deploymentId')

          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV

          # Wait for deployment to complete and check status
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID

      - name: Check ECS service status
        run: |
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments' --output json

      - name: Rollback on Failure
        if: failure()
        run: |
          if [ -n "${{ env.deployment_id }}" ]; then
            set -e
            DEPLOYMENT_ID="${{ env.deployment_id }}"
            STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID | jq -r '.deploymentInfo.status')
            if [ "$STATUS" != "Succeeded" ]; then
              echo "Deployment failed! Initiating rollback..."
              aws deploy rollback-deployment --deployment-id $DEPLOYMENT_ID
            fi
          else
            echo "No deployment ID found, skipping rollback"
          fi

  update-ecs-config:
    name: Update ECS Configuration
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Blue-Green Deployment Configuration
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/blue-green.yml \
            --stack-name snapshare-blue-green \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              ServiceName=${{ env.ECS_SERVICE }} \
              ContainerName=${{ env.CONTAINER_NAME }} \
              ContainerPort=80 \
              EcsClusterName=${{ env.ECS_CLUSTER }} \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              DeploymentGroupName=${{ env.DEPLOYMENT_GROUP }}